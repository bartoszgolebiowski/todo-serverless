service: aws-nodejs-Todo
plugins:
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function
  - serverless-offline
provider:
  name: aws
  runtime: nodejs10.x
  stage: test
  region: eu-central-1
  stackName: Todo-bartosz-golebiowski-stack
  apiName: Todo-bartosz-golebiowski-api
  deploymentBucket:
    name: Todo-bartosz-golebiowski-bucket
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        "*"
      Resource:
        Fn::GetAtt:
          - todoTable
          - Arn
    - Effect: "Allow"
      Action:
        "*"
      Resource:
        Fn::GetAtt:
          - userTable
          - Arn

  environment:
    TODO_TABLE: 'todoTable'
    USER_TABLE: 'userTable'

custom:
  dynamodb:
    stages:
      - test
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless, nodejs Todo app
    models:
      - name: todoComment
        contentType: "application/json"
        schema:
            type: object
            properties:
              todo_id:
                type: string
              comment:
                type: string
            required:
              - todo_id
              - comment

      - name: createTodo
        contentType: "application/json"
        schema:
          type: object
          properties:
            name:
              type: string
            author:
              type: string
          required:
            - name
            - author

      - name: todo
        contentType: "application/json"
        schema:
          type: object
          properties:
            id:
              type: string
          required:
            - todo_id

      - name: user
        contentType: "application/json"
        schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
            required:
              - username
              - password

functions:
  getAllTodo:
    handler: src/controller/Todo/todoController.getAllTodo
    name: getAllTodo
    events:
    - http:
        documentation:
          summary: "Gets all Todo"
          description: "Gets all Todo"
        path: todo
        method: get
        authorizer: auth

  getSingleTodo:
    handler: src/controller/Todo/todoController.getSingleTodo
    name: getSingleTodo
    events:
      - http:
          documentation:
            summary: "Gets single Todo"
            description: "Gets single Todo"
          path: todo/{todo_id}
          method: get

  createTodo:
    handler: src/controller/Todo/todoController.createTodo
    name: createTodo
    events:
      - http:
          documentation:
            summary: "Create new Todo"
            description: "Creates new Todo"
            requestModels:
              "application/json": createTodo
          path: todo/create
          method: post
          reqValidatorName: onlyBody

  updateTodo:
    handler: src/controller/Todo/todoController.updateTodo
    name: updateTodo
    events:
      - http:
          documentation:
            summary: "Updates existing Todo"
            description: "Updates existing Todo"
            requestModels:
              "application/json": todo
          path: todo/update
          method: patch
          reqValidatorName: onlyBody

  deleteTodo:
    handler: src/controller/Todo/todoController.deleteTodo
    name: deleteTodo
    events:
      - http:
          documentation:
            summary: "Deletes Todo"
            description: "Deletes Todo"
            requestModels:
              "application/json": todo
          path: todo/delete
          method: delete
          reqValidatorName: onlyBody

  addComment:
    handler: src/controller/Todo/todoController.addComment
    name: todoComment
    events:
        - http:
            documentation:
              summary: "Add comment to Todo"
              description: "Add comment to Todo"
              requestModels:
                "application/json": todoComment
            path: todo/message
            method: PATCH
            reqValidatorName: onlyBody
  createUser:
    handler: src/controller/user/userController.createUser
    name: createUser
    events:
      - http:
          documentation:
            summary: "Creates user"
            description: "Creates user"
            requestModels:
              "application/json": user
          path: user/create
          method: post
          reqValidatorName: onlyBody

  login:
    handler: src/controller/user/userController.login
    name: Login
    events:
      - http:
          documentation:
            summary: "Login users"
            description: "Login users"
            requestModels:
              "application/json": user
          path: login
          method: post
          reqValidatorName: onlyBody

  auth:
    handler: src/controller/user/userController.auth
    name: auth

resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    todoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODO_TABLE}
        AttributeDefinitions:
          - AttributeName: todo_id
            AttributeType: S
        KeySchema:
          - AttributeName: todo_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    onlyBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true
